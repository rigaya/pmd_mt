name: Build Windows Releases

on:
  push:
    branches:
      - master
      - actions
    tags:
      - '*'

jobs:
  get_version_name:
    name: Get version name
    runs-on: ubuntu-latest
    outputs:
      rev_count: ${{ steps.rev.outputs.REVCOUNT }}
      version_name: ${{ steps.rev.outputs.VERSION_NAME }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set version name
      id: rev
      run: |
        cd ${{ github.workspace }}
        REVCOUNT=`git rev-list --count HEAD`
        echo "rev_count=${REVCOUNT}" >> $GITHUB_OUTPUT
        if [[ "${{ github.ref }}" =~ "refs/tags/" ]]; then
          VERSION=$(echo ${{ github.ref }} | sed -e "s#refs/tags/##g")
        else
          VERSION=r${REVCOUNT}
        fi
        echo "version_name=${VERSION}" >> $GITHUB_OUTPUT

  build:
    name: Upload Release Asset
    runs-on: windows-2019
    needs: get_version_name

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86
            platform: Win32
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: ${{ matrix.arch }}

      - name: MSBuild
        run: |
          msbuild pmd_mt.sln /t:build /p:configuration=Release /p:Platform=${{ matrix.platform }} -maxcpucount

      - name: Create Archieve
        id: archieve
        run: |
          cd ${{ matrix.platform }}\Release
          7z a -mx9 pmd_mt_${{ needs.get_version_name.outputs.version_name }}.zip pmd_mt.auf

      - name: Calc hash
        id: calc_hash
        run: |
          7z h -scrc* pmd_mt_${{ needs.get_version_name.outputs.version_name }}.zip

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: .\pmd_mt_${{ needs.get_version_name.outputs.version_name }}.zip